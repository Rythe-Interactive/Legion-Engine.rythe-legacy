
.. _program_listing_file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_core_ecs_ecsregistry.hpp:

Program Listing for File ecsregistry.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_core_ecs_ecsregistry.hpp>` (``/home/runner/work/Legion-Engine.rythe-legacy/Legion-Engine.rythe-legacy/legion/engine/core/ecs/ecsregistry.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <core/containers/containers.hpp>
   #include <core/types/types.hpp>
   #include <core/common/common.hpp>
   #include <core/async/async.hpp>
   #include <core/ecs/component_pool.hpp>
   #include <core/ecs/queryregistry.hpp>
   #include <core/ecs/entityquery.hpp>
   #include <core/ecs/entity_handle.hpp>
   #include <core/ecs/archetype.hpp>
   
   #include <utility>
   #include <memory>
   #include <optional>
   #include <unordered_map>
   
   namespace legion::core::ecs
   {
   #define world_entity_id 1
   
       class component_handle_base;
   
       template<typename component_type>
       class component_handle;
   
       struct entity_data
       {
           hashed_sparse_set<id_type> components;
       };
   
       class EcsRegistry
       {
       private:
           static id_type m_nextEntityId;
   
           mutable async::rw_spinlock m_familyLock;
           std::unordered_map<id_type, std::unique_ptr<component_pool_base>> m_families;
           std::unordered_map<id_type, std::string> m_componentNames;
   
   
           mutable async::rw_spinlock m_entityDataLock;
           std::unordered_map<id_type, entity_data> m_entityData;
   
           mutable async::rw_spinlock m_entityLock;
           entity_set m_entities;
           sparse_map<id_type, std::string> m_entityNames;
   
           QueryRegistry m_queryRegistry;
           events::EventBus* m_eventBus;
   
           void recursiveDestroyEntityInternal(id_type entityId);
   
       public:
           static entity_handle world;
   
           EcsRegistry(events::EventBus* eventBus);
   
           template<typename component_type>
           void reportComponentType(std::optional<std::string> name = std::nullopt)
           {
               OPTICK_EVENT();
               async::readwrite_guard guard(m_familyLock);
               if (!m_families.count(typeHash<component_type>())) {
                   m_families[typeHash<component_type>()] = std::make_unique<component_pool<component_type>>(this, m_eventBus);
                   if (name.has_value())
                   {
                       m_componentNames[typeHash<component_type>()] = name.value();
                   }
                   else {
                       m_componentNames[typeHash<component_type>()] = std::string(nameOfType<component_type>());
                   }
               }
           }
   
           template<typename component_type>
           L_NODISCARD component_pool<component_type>* getFamily()
           {
               return static_cast<component_pool<component_type>*>(getFamily(typeHash<component_type>()));
           }
   
           async::rw_spinlock& getEntityLock() const
           {
               return m_entityLock;
           }
   
           std::string getFamilyName(id_type id)
           {
               if (const auto itr = m_componentNames.find(id); itr != m_componentNames.end())
               {
                   return itr->second;
               }
               return "";
           }
   
           L_NODISCARD component_pool_base* getFamily(id_type componentTypeId);
   
           L_NODISCARD bool hasComponent(id_type entityId, id_type componentTypeId);
   
           template<typename component_type CNDOXY(doesnt_inherit_from<component_type, archetype_base> = 0)>
           L_NODISCARD bool hasComponent(id_type entityId)
           {
               return hasComponent(entityId, typeHash<component_type>());
           }
   
           template<typename component_type, typename... component_types CNDOXY(doesnt_inherit_from<component_type, archetype_base> = 0)>
           L_NODISCARD bool hasComponents(id_type entityId)
           {
               return hasComponent<component_type>(entityId) && (hasComponent<component_types>(entityId) && ...);
           }
   
           template<typename archetype_type CNDOXY(inherits_from<archetype_type, archetype_base> = 0)>
           L_NODISCARD bool hasComponents(id_type entityId)
           {
               return archetype_type::has(this, entityId);
           }
   
           L_NODISCARD component_handle_base getComponent(id_type entityId, id_type componentTypeId);
   
           template<typename component_type CNDOXY(doesnt_inherit_from<component_type, archetype_base> = 0)>
           L_NODISCARD component_handle<component_type> getComponent(id_type entityId)
           {
               return getComponent(entityId, typeHash<component_type>()).template cast<component_type>();
           }
   
           template<typename component_type, typename... component_types CNDOXY(doesnt_inherit_from<component_type, archetype_base> = 0)>
           L_NODISCARD std::tuple<component_handle<component_type>, component_handle<component_types>...> getComponents(id_type entityId)
           {
               return std::make_tuple(getComponent<component_type>(entityId), getComponent<component_types>(entityId)...);
           }
   
           template<typename archetype_type, typename... component_types CNDOXY(inherits_from<archetype_type, archetype_base> = 0)>
           L_NODISCARD auto getComponents(id_type entityId)
           {
               return archetype_type::get(this, entityId);
           }
   
           template<typename component_type CNDOXY(doesnt_inherit_from<component_type, archetype_base> = 0)>
           component_handle<component_type> createComponent(id_type entityId)
           {
               return createComponent(entityId, typeHash<component_type>()).template cast<component_type>();
           }
   
           template<typename component_type CNDOXY(doesnt_inherit_from<component_type, archetype_base> = 0)>
           component_handle<std::remove_reference_t<component_type>> createComponent(id_type entityId, component_type&& component)
           {
               std::remove_reference_t<component_type> temp = component;
               return createComponent(entityId, typeHash<std::remove_reference_t<component_type>>(), &temp).template cast<std::remove_reference_t<component_type>>();
           }
   
           template<typename component_type CNDOXY(doesnt_inherit_from<component_type, archetype_base> = 0)>
           component_handle<std::remove_reference_t<component_type>> createComponent(id_type entityId, component_type& component)
           {
               std::remove_reference_t<component_type> temp = component;
               return createComponent(entityId, typeHash<std::remove_reference_t<component_type>>(), &temp).template cast<std::remove_reference_t<component_type>>();
           }
   
           template<typename archetype_type CNDOXY(inherits_from<archetype_type, archetype_base> = 0)>
           auto createComponents(id_type entityId)
           {
               return archetype_type::create(this, entityId);
           }
   
           template<typename archetype_type, typename... component_types CNDOXY(inherits_from<archetype_type, archetype_base> = 0)>
           auto createComponents(id_type entityId, component_types&&... defaultValues)
           {
               return archetype_type::create(this, entityId, std::move(defaultValues)...);
           }
   
           template<typename component_type, typename... component_types CNDOXY(doesnt_inherit_from<component_type, archetype_base> = 0)>
           std::tuple<component_handle<component_type>, component_handle<component_types>...> createComponents(id_type entityId)
           {
               return std::make_tuple(createComponent<component_type>(entityId), createComponent<component_types>(entityId)...);
           }
   
           template<typename component_type, typename... component_types CNDOXY(doesnt_inherit_from<component_type, archetype_base> = 0)>
           std::tuple<component_handle<std::remove_reference_t<component_type>>, component_handle<std::remove_reference_t<component_types>>...> createComponents(id_type entityId, component_type&& defaultValue, component_types&&... defaultValues)
           {
               return std::make_tuple(createComponent<std::remove_reference_t<component_type>>(entityId, std::forward<component_type>(defaultValue)), createComponent<std::remove_reference_t<component_types>>(entityId, std::forward<component_types>(defaultValues))...);
           }
   
           component_handle_base createComponent(id_type entityId, id_type componentTypeId);
   
           component_handle_base createComponent(id_type entityId, id_type componentTypeId, void* value);
   
           component_handle_base copyComponent(id_type destinationEntity, id_type sourceEntity, id_type componentTypeId);
   
           void destroyComponent(id_type entityId, id_type componentTypeId);
   
           template<typename component_type CNDOXY(doesnt_inherit_from<component_type, archetype_base> = 0)>
           void destroyComponent(id_type entityId)
           {
               destroyComponent(entityId, typeHash<component_type>());
           }
   
           template<typename component_type, typename... component_types CNDOXY(doesnt_inherit_from<component_type, archetype_base> = 0)>
           void destroyComponents(id_type entityId)
           {
               destroyComponent(entityId, typeHash<component_type>());
               (destroyComponent(entityId, typeHash<component_types>()), ...);
           }
   
           template<typename archetype_type CNDOXY(inherits_from<archetype_type, archetype_base> = 0)>
           void destroyComponents(id_type entityId)
           {
               archetype_type::destroy(this, entityId);
           }
   
           L_NODISCARD bool validateEntity(id_type entityId);
   
           L_NODISCARD entity_handle createEntity(bool worldChild = true, id_type entityId = invalid_id);
   
           L_NODISCARD entity_handle createEntity(id_type entityId, bool worldChild = true);
   
           void destroyEntity(id_type entityId, bool recurse = true);
   
           L_NODISCARD entity_handle getEntity(id_type entityId);
   
           L_NODISCARD entity_data getEntityData(id_type entityId);
           void setEntityData(id_type entityId, const entity_data& data);
   
           L_NODISCARD entity_handle getEntityParent(id_type entityId);
   
           L_NODISCARD std::pair<entity_set&, async::rw_spinlock&> getEntities();
   
           template<typename... component_types>
           L_NODISCARD EntityQuery createQuery()
           {
               return m_queryRegistry.createQuery<component_types...>();
           }
   
           L_NODISCARD EntityQuery createQuery(const hashed_sparse_set<id_type>& componentTypes)
           {
               return m_queryRegistry.createQuery(componentTypes);
           }
           void setComponentName(id_type c, const std::string& n)
           {
               m_componentNames[c] = n;
           }
   
           L_NODISCARD std::string getComponentName(id_type c) noexcept
           {
               auto itr = m_componentNames.find(c);
   
               if (itr != m_componentNames.end())
               {
                   return itr->second;
               }
               else
               {
                   m_componentNames[c] = "Component (not reported!)  " + std::to_string(c);
                   return "Component (not reported!)  " + std::to_string(c);
               }
   
           }
   
       };
   }
   
   #include <core/ecs/entity_handle.inl>
   #include <core/ecs/archetype.inl>

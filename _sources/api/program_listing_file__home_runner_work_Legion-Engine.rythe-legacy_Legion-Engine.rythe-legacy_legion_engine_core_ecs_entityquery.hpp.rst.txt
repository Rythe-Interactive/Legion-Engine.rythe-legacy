
.. _program_listing_file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_core_ecs_entityquery.hpp:

Program Listing for File entityquery.hpp
========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_core_ecs_entityquery.hpp>` (``/home/runner/work/Legion-Engine.rythe-legacy/Legion-Engine.rythe-legacy/legion/engine/core/ecs/entityquery.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <core/types/primitives.hpp>
   #include <core/types/type_util.hpp>
   #include <core/platform/platform.hpp>
   #include <core/containers/hashed_sparse_set.hpp>
   #include <core/ecs/entity_handle.hpp>
   #include <core/ecs/archetype.hpp>
   #include <core/ecs/component_container.hpp>
   
   namespace legion::core::ecs
   {
       class QueryRegistry;
       class EcsRegistry;
       using entity_container = std::vector<entity_handle>;
   
       class EntityQuery
       {
       private:
           QueryRegistry* m_registry;
           EcsRegistry* m_ecsRegistry;
           id_type m_id;
           const entity_container* m_localcopy;
   
       public:
           EntityQuery(id_type id, QueryRegistry* registry, EcsRegistry* ecsRegistry);
           EntityQuery() = default;
           ~EntityQuery();
   
           EntityQuery(EntityQuery&& other);
           EntityQuery(const EntityQuery& other);
   
           EntityQuery operator=(EntityQuery&& other);
           EntityQuery operator=(const EntityQuery& other);
   
           component_container_base& get(id_type componentTypeId);
   
           template<typename component_type>
           component_container<component_type>& get()
           {
               return get(typeHash<component_type>()).template cast<component_type>();
           }
   
           void submit(id_type componentTypeId);
   
           template<typename component_type>
           void submit()
           {
               submit(typeHash<component_type>());
           }
   
           void queryEntities();
   
           entity_container::const_iterator begin() const;
   
           entity_container::const_iterator end() const;
   
           L_NODISCARD id_type id() { return m_id; }
   
           template <typename archetype>
           void addArchetype()
           {
               addArchetypeImpl<archetype>(std::make_index_sequence<std::tuple_size<archetype>::value>{});
           }
       private:
           template <typename archetype,size_t ... I>
           void addArchetypeImpl(std::index_sequence<I...>)
           {
               (addComponentType(typeHash<std::tuple_element<I,archetype>>),...);
           }
       public:
   
           template<typename component_type>
           void addComponentType() { addComponentType(typeHash<component_type>()); }
   
   
           template <class archetype, std::size_t N = std::tuple_size<archetype>::value,typename Indicies = std::make_index_sequence<N>>
           void addArchetype()
           {
               addArchetypeEnumerated<archetype>(Indicies{});
           }
   
           template <class archetype,std::size_t... I>
           void addArchetypeEnumerated(std::index_sequence<I...>)
           {
               (addComponentType<std::tuple_element<I,archetype>>(),...);
           }
   
           void addComponentType(id_type componentTypeId);
   
           template<typename component_type>
           void removeComponentType() { removeComponentType(typeHash<component_type>()); }
   
           void removeComponentType(id_type componentTypeId);
   
           entity_handle operator[](size_type index);
   
           size_type size();
       };
   }

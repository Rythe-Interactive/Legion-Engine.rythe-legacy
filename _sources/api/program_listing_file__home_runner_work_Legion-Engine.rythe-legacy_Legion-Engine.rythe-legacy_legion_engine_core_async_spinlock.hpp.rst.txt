
.. _program_listing_file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_core_async_spinlock.hpp:

Program Listing for File spinlock.hpp
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_core_async_spinlock.hpp>` (``/home/runner/work/Legion-Engine.rythe-legacy/Legion-Engine.rythe-legacy/legion/engine/core/async/spinlock.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <core/platform/platform.hpp>
   #include <core/detail/internals.hpp>
   #include <core/logging/logging.hpp>
   #include <atomic>
   #include <mutex> // Anyone who includes this file can also use std::lock_guard
   
   namespace legion::core::async
   {
       struct spinlock final
       {
       private:
           static bool m_forceRelease;
           static std::atomic_uint m_lastId;
           static thread_local std::unordered_map<id_type, uint> m_localState;
           std::atomic_bool m_lock = { false };
           uint m_id = m_lastId.fetch_add(1, std::memory_order_relaxed);
   
       public:
           static void force_release(bool release = true);
   
           spinlock() = default;
   
           spinlock(spinlock&& source) noexcept;
   
           spinlock& operator=(spinlock&& source) noexcept;
   
           void lock() noexcept;
   
           L_NODISCARD bool try_lock() noexcept;
   
           void unlock() noexcept;
       };
   }


.. _program_listing_file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_physics_mesh_splitter_utils_splittable_polygon.hpp:

Program Listing for File splittable_polygon.hpp
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_physics_mesh_splitter_utils_splittable_polygon.hpp>` (``/home/runner/work/Legion-Engine.rythe-legacy/Legion-Engine.rythe-legacy/legion/engine/physics/mesh_splitter_utils/splittable_polygon.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <core/core.hpp>
   
   
   namespace legion::physics
   {
       enum class SplitState
       {
           Above,
           Below,
           Split,
           Unknown
       };
   
       struct MeshHalfEdge;
   
       class SplittablePolygon : public std::enable_shared_from_this<SplittablePolygon>
       {
       public:
           SplittablePolygon(std::vector<std::shared_ptr<MeshHalfEdge>>& pEdgesInMesh,math::vec3 normal);
   
           std::vector<std::shared_ptr<MeshHalfEdge>>& GetMeshEdges();
   
           int CountBoundary();
   
           void CalculateLocalCentroid();
   
           void AssignEdgeOwnership();
   
           void ResetEdgeVisited();
           
           void CalculatePolygonSplit(const math::mat4& transform
               , math::vec3 planePosition, math::vec3 planeNormal,bool keepBelow);
   
           void IdentifyBoundaries(const math::mat4& transform);
   
           SplitState GetPolygonSplitState() const;
   
           void DEBUG_drawEdgeBoundaryInset(const math::mat4& transform);
   
           //mostly used for debugging
           math::vec3 localCentroid{ 0,0,0 };
           math::color debugColor;
   
           bool isVisited = false;
           //bool isIntersectingPart = false;
   
           math::vec3 localNormal;
       private:
   
           SplitState m_SplitState = SplitState::Unknown;
   
           std::vector<std::shared_ptr<MeshHalfEdge>> edgesInPolygon;
   
   
   
       };
   }
   
   


.. _program_listing_file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_rendering_data_particle_system_base.hpp:

Program Listing for File particle_system_base.hpp
=================================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_rendering_data_particle_system_base.hpp>` (``/home/runner/work/Legion-Engine.rythe-legacy/Legion-Engine.rythe-legacy/legion/engine/rendering/data/particle_system_base.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <core/core.hpp>
   #include <rendering/components/particle.hpp>
   #include <rendering/components/particle_emitter.hpp>
   #include <rendering/data/material.hpp>
   #include <rendering/data/model.hpp>
   
   namespace legion::rendering
   {
       class ParticleSystemBase
       {
           friend class ParticleSystemManager;
       public:
           virtual ~ParticleSystemBase() = default;
   
   
           virtual void setup(ecs::component_handle<particle_emitter> particle_emitter) const LEGION_IMPURE;
           virtual void update(std::vector<ecs::entity_handle>& particle_list, ecs::component_handle<particle_emitter> particle_emitter, ecs::EntityQuery& entities, time::span delta_time) const LEGION_IMPURE;
   
       protected:
           virtual void createParticle(
               ecs::entity_handle ent) const;
           virtual void cleanUpParticle(
               ecs::entity_handle particleHandle,
               particle_emitter& emitterHandle) const;
           ecs::component_handle<particle> checkToRecycle(
               particle_emitter& emitterHandle) const;
   
           bool m_looping;
   
           float m_maxLifeTime;
           float m_startingLifeTime;
   
           uint m_spawnRate;
           uint m_particleCount;
           uint m_maxParticles;
   
           math::vec3 m_startingVelocity;
   
           math::vec3 m_startingSize;
           float m_sizeOverLifetime;
   
           material_handle m_particleMaterial;
           model_handle m_particleModel;
           static ecs::EcsRegistry* m_registry;
       };
   }

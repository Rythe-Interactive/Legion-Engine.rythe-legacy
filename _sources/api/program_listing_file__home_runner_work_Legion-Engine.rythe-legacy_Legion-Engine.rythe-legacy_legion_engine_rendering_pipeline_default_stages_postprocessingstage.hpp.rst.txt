
.. _program_listing_file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_rendering_pipeline_default_stages_postprocessingstage.hpp:

Program Listing for File postprocessingstage.hpp
================================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_rendering_pipeline_default_stages_postprocessingstage.hpp>` (``/home/runner/work/Legion-Engine.rythe-legacy/Legion-Engine.rythe-legacy/legion/engine/rendering/pipeline/default/stages/postprocessingstage.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <rendering/pipeline/base/renderstage.hpp>
   #include <rendering/pipeline/base/pipeline.hpp>
   #include <rendering/data/screen_quad.hpp>
   #include <rendering/data/postprocessingeffect.hpp>
   
   namespace legion::rendering
   {
       class PostProcessingStage : public RenderStage<PostProcessingStage>
       {
       private:
           static std::multimap<priority_type, std::unique_ptr<PostProcessingEffectBase>,std::greater<>> m_effects;
           screen_quad m_screenQuad;
   
           framebuffer m_drawFBO;
   
           texture_handle m_swapTexture;
   
           shader_handle m_screenShader;
   
       public:
           template<typename effect_type, typename ...Args CNDOXY(inherits_from<effect_type, PostProcessingEffect<effect_type>> = 0)>
           static void addEffect(priority_type priority = default_priority, Args&&...args)
           {
               m_effects.emplace(priority, std::unique_ptr<PostProcessingEffectBase>(new effect_type(std::forward<Args>(args)...)));
           }
   
           template<typename effect_type CNDOXY(inherits_from<effect_type, PostProcessingEffect<effect_type>> = 0)>
           static void removeEffect()
           {
               for (auto iter = m_effects.begin(); iter != m_effects.end();)
               {
                   const auto eraseIter = iter++;
                   if (eraseIter->second->getId() == effect_type::m_id)
                   {
                       m_effects.erase(eraseIter);
                   }
               }
           }
   
           virtual void setup(app::window& context) override;
           virtual void render(app::window& context, camera& cam, const camera::camera_input& camInput, time::span deltaTime) override;
           virtual priority_type priority() override;
       };
   
   }
   


.. _program_listing_file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_physics_mesh_splitter_utils_intersection_edge_info.hpp:

Program Listing for File intersection_edge_info.hpp
===================================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_physics_mesh_splitter_utils_intersection_edge_info.hpp>` (``/home/runner/work/Legion-Engine.rythe-legacy/Legion-Engine.rythe-legacy/legion/engine/physics/mesh_splitter_utils/intersection_edge_info.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <core/core.hpp>
   #include <physics/mesh_splitter_utils/mesh_splitter_typedefs.hpp>
   namespace legion::physics
   {
       struct IntersectionEdgeInfo
       {
           IntersectionEdgeInfo(meshHalfEdgePtr pPairintToConnectTo) : 
               pairingToConnectTo(pPairintToConnectTo)
           {
               first = pairingToConnectTo->nextEdge->position;
               second = pairingToConnectTo->position;
           }
   
   
           //one of the edge created by the intersection of a polygon
           meshHalfEdgePtr pairingToConnectTo = nullptr;
   
           //the instantiated edge that will be the pairing of pairingToConnectTo
           meshHalfEdgePtr instantiatedEdge = nullptr;
   
           //the instantiated edge that will be located at the centroid of the intersecting polygon
           meshHalfEdgePtr centroidEdge = nullptr;
   
           //the position of the nextEdge of 'pairingToConnectTo'
           math::vec3 first;
           //the position of the edge of 'pairingToConnectTo'
           math::vec3 second;
   
           
       };
   
   
   
       
   }
   


.. _program_listing_file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_core_engine_module.hpp:

Program Listing for File module.hpp
===================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_core_engine_module.hpp>` (``/home/runner/work/Legion-Engine.rythe-legacy/Legion-Engine.rythe-legacy/legion/engine/core/engine/module.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <core/types/primitives.hpp>
   #include <core/platform/platform.hpp>
   #include <core/engine/system.hpp>
   #include <core/containers/sparse_map.hpp>
   #include <core/ecs/ecsregistry.hpp>
   #include <core/scheduling/scheduler.hpp>
   #include <core/events/eventbus.hpp>
   #include <memory>
   
   namespace legion::core
   {
       class Module
       {
           friend class Engine;
       private:
           sparse_map<id_type, std::unique_ptr<SystemBase>> m_systems;
   
           void init()
           {
               for (auto [_, system] : m_systems)
                   system->setup();
           };
   
       protected:
           static ecs::EcsRegistry* m_ecs;
           static scheduling::Scheduler* m_scheduler;
           static events::EventBus* m_eventBus;
   
           template<size_type charc>
           void addProcessChain(const char(&name)[charc])
           {
               m_scheduler->addProcessChain<charc>(name);
           }
   
           template<typename SystemType, typename... Args CNDOXY(inherits_from<SystemType, System<SystemType>> = 0)>
           void reportSystem(Args&&... args)
           {
               OPTICK_EVENT();
               m_systems.insert(typeHash<SystemType>(), std::make_unique<SystemType>(std::forward<Args>(args)...));
           }
   
           template<typename component_type>
           void reportComponentType()
           {
               m_ecs->reportComponentType<component_type>();
           }
   
       public:
           virtual void setup() LEGION_PURE;
   
           virtual priority_type priority() LEGION_IMPURE_RETURN(default_priority);
   
           virtual ~Module() = default;
       };
   }

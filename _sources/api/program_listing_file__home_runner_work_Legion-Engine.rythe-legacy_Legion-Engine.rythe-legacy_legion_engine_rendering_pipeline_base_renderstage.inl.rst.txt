
.. _program_listing_file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_rendering_pipeline_base_renderstage.inl:

Program Listing for File renderstage.inl
========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_rendering_pipeline_base_renderstage.inl>` (``/home/runner/work/Legion-Engine.rythe-legacy/Legion-Engine.rythe-legacy/legion/engine/rendering/pipeline/base/renderstage.inl``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   namespace legion::rendering
   {
       template<typename T>
       L_NODISCARD inline bool RenderStageBase::has_meta(const std::string& name)
       {
           OPTICK_EVENT();
           return m_pipeline->has_meta<T>(name);
       }
   
       template<typename T, typename... Args>
       inline T* RenderStageBase::create_meta(const std::string& name, Args&&... args)
       {
           OPTICK_EVENT();
           return m_pipeline->create_meta<T>(name, std::forward<Args>(args)...);
       }
   
       template<typename T>
       L_NODISCARD inline T* RenderStageBase::get_meta(const std::string& name)
       {
           OPTICK_EVENT();
           return m_pipeline->get_meta<T>(name);
       }
   
       template<typename T>
       L_NODISCARD inline bool RenderStageBase::has_meta(id_type nameHash)
       {
           OPTICK_EVENT();
           return m_pipeline->has_meta<T>(nameHash);
       }
   
       template<typename T, typename ...Args>
       inline T* RenderStageBase::create_meta(id_type nameHash, Args && ...args)
       {
           OPTICK_EVENT();
           return m_pipeline->create_meta<T>(nameHash, std::forward<Args>(args)...);
       }
   
       template<typename T>
       L_NODISCARD inline T* RenderStageBase::get_meta(id_type nameHash)
       {
           OPTICK_EVENT();
           return m_pipeline->get_meta<T>(nameHash);
       }
   
   }

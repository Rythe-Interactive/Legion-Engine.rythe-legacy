
.. _program_listing_file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_physics_data_edge_label.hpp:

Program Listing for File edge_label.hpp
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_physics_data_edge_label.hpp>` (``/home/runner/work/Legion-Engine.rythe-legacy/Legion-Engine.rythe-legacy/legion/engine/physics/data/edge_label.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   #include <core/core.hpp>
   
   namespace legion::physics
   {
       struct EdgeLabel
       {
           //first pairing states face id and second pair states edge id
           std::pair<int, int> firstEdge = std::make_pair(-1, -1);
           std::pair<int, int> nextEdge = std::make_pair(-1, -1);
   
           void Log() const
           {
               log::debug("- This EdgeLabel has ");
               log::debug("firstEdge {},{} and secondEdge {},{}",
                   firstEdge.first,firstEdge.second,nextEdge.first,nextEdge.second);
           }
   
           EdgeLabel()
           {
   
           }
   
           EdgeLabel(std::pair<int, int> pFirstEdge, std::pair<int, int> pNextEdge) 
           {
               firstEdge = std::make_pair(pFirstEdge.first, pFirstEdge.second);
               nextEdge = std::make_pair(pNextEdge.first, pNextEdge.second);
   
           }
   
           EdgeLabel(const EdgeLabel& rhs)
           {
               firstEdge = rhs.firstEdge;
               nextEdge = rhs.nextEdge;
           }
   
           bool operator==(const EdgeLabel& rhs)
           {
               return firstEdge == rhs.firstEdge && nextEdge == rhs.nextEdge;
           }
   
           bool IsSet() const
           {
               return ((firstEdge.first != -1 && firstEdge.second != -1)
                   && (nextEdge.first != -1 && nextEdge.second != -1));
           }
   
       };
   }


.. _program_listing_file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_core_async_async_operation.cpp:

Program Listing for File async_operation.cpp
============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_core_async_async_operation.cpp>` (``/home/runner/work/Legion-Engine.rythe-legacy/Legion-Engine.rythe-legacy/legion/engine/core/async/async_operation.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include <core/async/async_operation.hpp>
   #include <thread>
   #include <core/logging/logging.hpp>
   
   namespace legion::core::async
   {
       size_type async_progress::size() const noexcept
       {
           return m_size;
       }
   
       size_type async_progress::rawProgress() const noexcept
       {
           return m_progress.load(std::memory_order_relaxed);
       }
   
       void async_progress::complete() noexcept
       {
           m_progress.store(m_size, std::memory_order_release);
       }
   
       void async_progress::advance_progress(size_type progress) noexcept
       {
           m_progress.fetch_add(progress, std::memory_order_release);
       }
   
       bool async_progress::is_done() const noexcept
       {
           return m_progress.load(std::memory_order_relaxed) >= m_size;
       }
   
       float async_progress::progress() const noexcept
       {
           return ((float)m_progress.load(std::memory_order_relaxed)) / m_size;
       }
   
   }


.. _program_listing_file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_core_data_importers_mesh_importers.hpp:

Program Listing for File mesh_importers.hpp
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-Engine.rythe-legacy_Legion-Engine.rythe-legacy_legion_engine_core_data_importers_mesh_importers.hpp>` (``/home/runner/work/Legion-Engine.rythe-legacy/Legion-Engine.rythe-legacy/legion/engine/core/data/importers/mesh_importers.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <core/filesystem/assetimporter.hpp>
   #include <core/data/mesh.hpp>
   
   namespace legion::core
   {
       struct obj_mesh_loader : public filesystem::resource_converter<mesh, mesh_import_settings>
       {
           common::result_decay_more<mesh, fs_error> load_default(const filesystem::basic_resource& resource) override
           {
               return load(resource, mesh_import_settings(default_mesh_settings));
           }
           virtual common::result_decay_more<mesh, fs_error> load(const filesystem::basic_resource& resource, mesh_import_settings&& settings) override;
       };
   
       struct gltf_binary_mesh_loader : public filesystem::resource_converter<mesh, mesh_import_settings>
       {
           common::result_decay_more<mesh, fs_error> load_default(const filesystem::basic_resource& resource) override
           {
               return load(resource, mesh_import_settings(default_mesh_settings));
           }
           virtual common::result_decay_more<mesh, fs_error> load(const filesystem::basic_resource& resource, mesh_import_settings&& settings) override;
       };
   
       struct gltf_ascii_mesh_loader : public filesystem::resource_converter<mesh, mesh_import_settings>
       {
           common::result_decay_more<mesh, fs_error> load_default(const filesystem::basic_resource& resource) override
           {
               return load(resource, mesh_import_settings(default_mesh_settings));
           }
           virtual common::result_decay_more<mesh, fs_error> load(const filesystem::basic_resource& resource, mesh_import_settings&& settings) override;
       };
   }
